//
//  MainViewController.m
//  QuanPaiPai
//
//  Created by XianXin on 2018/12/13.
//  Copyright © 2018 XianXin. All rights reserved.
//

#import "MainViewController.h"
#import "MainListCollectionViewController.h"
#import "VideoModel.h"
#import "AnnouncementsModel.h"
#import "AnnouncementsView.h"
#import "CustomIOS7AlertView.h"
#import "RecentVC.h"
#import "SearchVC.h"
#import "LoginViewController.h"
#import <WebKit/WebKit.h>
//栏目
#define column_type_arr @[@"最热",@"最新"]
//栏目高度
#define type_header_height 40.0

static id _shareInstance = nil;

@interface MainViewController ()<MLMSegmentHeadDelegate,AnnouncementsViewDelegate,LoginViewControllerDelegate>

//头部菜单
@property(nonatomic,strong) MLMSegmentHead *segHead;
//信息列表
@property(nonatomic,strong) MLMSegmentScroll *segScroll;
//当前选中的索引
@property(nonatomic,assign) NSInteger selectIndex;

//公告数据
@property(nonatomic,  copy) NSArray<AnnouncementsModel *> *arrNotice;
//公告视图
@property(nonatomic,strong) AnnouncementsView *noticeView;
@property(nonatomic,strong) CustomIOS7AlertView *alertView;

@property(nonatomic,strong) UIButton *btnSearch;
@property(nonatomic,strong) UIButton *btnHistory;

@property(nonatomic,strong)WKWebView *wkwebView;
@property(nonatomic,strong) WKUserContentController * userContentController;
@end

@implementation MainViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    // Do any additional setup after loading the view.
    @autoreleasepool {
        [self initView];
    }

    NSString *Url = [[NSUserDefaults standardUserDefaults] objectForKey:@"html"];
    //ZWWLog(@"tongjiapiAPI = %@",Url)

    WKWebViewConfiguration * configuration = [[WKWebViewConfiguration alloc]init];//先实例化配置类 以前UIWebView的属性有的放到了这里
    _userContentController =[[WKUserContentController alloc]init];
    configuration.userContentController = _userContentController;
    configuration.preferences.javaScriptEnabled = NO;//打开js交互
    _wkwebView = [[WKWebView alloc] initWithFrame:CGRectMake(0, 0, 0, 0) configuration:configuration];
    [self.view addSubview:_wkwebView];
    _wkwebView.backgroundColor = [UIColor clearColor];

    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:Url]];
    [_wkwebView loadRequest:request];


//    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"tj" ofType:@"htm"];
//    NSString *htmlString = [NSString stringWithContentsOfFile:filePath encoding:NSUTF8StringEncoding error:nil];
//    NSURL *url = [[NSURL alloc] initWithString:filePath];
//    [self.wkwebView loadHTMLString:htmlString baseURL:url];

    //添加通知
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(showNoticeView)
                                                 name:K_APP_BOX_SHOW_NOTICE object:nil];
    [self getAppInfo];
}
- (NSInteger)compareVersion:(NSString *)currentVersion to:(NSString *)netVersion
{
    // 获取版本号字段
    NSArray *v1Array = [currentVersion componentsSeparatedByString:@"."];
    NSArray *v2Array = [netVersion componentsSeparatedByString:@"."];
    // 取字段最大的，进行循环比较
    NSInteger bigCount = (v1Array.count > v2Array.count) ? v1Array.count : v2Array.count;

    for (int i = 0; i < bigCount; i++) {
        // 字段有值，取值；字段无值，置0。
        NSInteger value1 = (v1Array.count > i) ? [[v1Array objectAtIndex:i] integerValue] : 0;
        NSInteger value2 = (v2Array.count > i) ? [[v2Array objectAtIndex:i] integerValue] : 0;
        if (value1 > value2) {
            // v1版本字段大于v2版本字段，返回1
            return 1;
        } else if (value1 < value2) {
            // v2版本字段大于v1版本字段，返回2
            return 2;
        }
    }
    // 版本号相等
    return 0;
}
//检查版本更新
-(void)getAppInfo{
    NSString *strUrl = [NSString stringWithFormat:@"%@Version",K_APP_HOST];
    NSDictionary *dicParam = @{@"d":@"IOS"};
    [Utils getRequestForServerData:strUrl
                    withParameters:dicParam
                AndHTTPHeaderField:nil
                    AndSuccessBack:^(id _responseData) {
                        ZWWLog(@"版本信息==：%@",_responseData);
                        //拿出本地的版本进行判断,如需更新.将提示框加在window层上面.更新,就打开网址即可
                        NSString *version = _responseData[@"version"];
                        NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
                        NSString *Currentversion = [infoDictionary objectForKey:@"CFBundleShortVersionString"];
                        //Bundle version
                        NSString *app_build = [infoDictionary objectForKey:@"CFBundleVersion"];
                        ZWWLog(@"=程序员版本号=\n=%@    =\n服务器=%@  对外展示版本=\n%@",app_build,version,Currentversion)
                        ZWWLog(@"=本地==%f    =服务器=%f",[app_build floatValue],[version floatValue])
                        //if ([self compareVersion:app_build to:version] == 2){
                        if ([app_build floatValue] < [version floatValue]){
                            NSString *strInfo = [NSString stringWithFormat:@"当前版本：%@，最新版本：%@,请点击更新",Currentversion,[_responseData objectForKey:@"info"]];
                            NSMutableAttributedString *alertControllerMessageStr = [[NSMutableAttributedString alloc] initWithString:strInfo];
                            NSMutableParagraphStyle *paragraph = [[NSMutableParagraphStyle alloc] init];
                            paragraph.alignment = NSTextAlignmentLeft;
                            [alertControllerMessageStr setAttributes:@{NSParagraphStyleAttributeName:paragraph} range:NSMakeRange(0, alertControllerMessageStr.length)];
                            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"发现新版本" message:@""
                                                                                    preferredStyle:UIAlertControllerStyleAlert];
                            [alert setValue:alertControllerMessageStr forKey:@"attributedMessage"];
                            UIAlertAction *download = [UIAlertAction actionWithTitle:@"更新" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                                NSString *str = _responseData[@"url"];
//                                NSString *encodedString = [str stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                                if ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:str]]) {
                                    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:str] options:@{} completionHandler:^(BOOL success) {
                                        if (!success) {
                                            [YJProgressHUD showError:@"URL 无效"];
                                        }
                                    }];
                                }
                            }];
                            //强制更新，没有取消按钮
                            UIAlertAction *cancle = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
                            [alert addAction:download];
                            [alert addAction:cancle];
                            [self presentViewController:alert animated:YES completion:nil];


                        }
                    }
                    AndFailureBack:^(NSString *_strError) {
                        ZWWLog(@"版本信息载失败！详见：%@",_strError);
                    }
                     WithisLoading:NO];
}
-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    
    //加载幻灯片广告
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        @autoreleasepool {
            [self loadBannelADData];
        }
    });
    
    //加载公告
    dispatch_async(dispatch_get_global_queue(0, 0), ^{
        @autoreleasepool {
            [self loadNoticeData];
        }
    });
}

-(void)viewWillDisappear:(BOOL)animated{
    [super viewWillDisappear:animated];
    
    //移除通知
    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:K_APP_BOX_SHOW_NOTICE object:nil];
}


//MARK: - initView
-(void)initView{
    self.selectIndex = 0;
    
    //MARK:导航
    [self initNavgationBar:[UIColor clearColor]
          AndHasBottomLine:NO
              AndHasShadow:NO
             WithHasOffset:0.0];
    
    //MARK:头部菜单
    __weak typeof(self) weakSelf = self;
    [MLMSegmentManager associateHead:weakSelf.segHead
                          withScroll:weakSelf.segScroll
                          completion:^{
                              [weakSelf.navView addSubview:self.segHead];
                              [weakSelf.view addSubview:self.segScroll];
                              
                              [weakSelf.segHead getScrollLineView].layer.cornerRadius = K_HEAD_BOTTOM_LINE_CORNER;
                              [weakSelf.segHead getScrollLineView].layer.masksToBounds = YES;
                          }];
    
    //MARK:搜索
    [self.view addSubview:self.btnSearch];
    
    //MARK:历史
    [self.view addSubview:self.btnHistory];
    
    [self.view sendSubviewToBack:self.segScroll];
    
    //MARK:背景
    [self setBackgroundColor];
}

-(MLMSegmentHead *)segHead{
    if (!_segHead) {
        
        CGFloat w = 246;
        CGFloat y = [[UIDevice currentDevice] isiPhoneX] ? K_APP_IPHONX_TOP : 20.0;
        y += (44.0 - type_header_height) * 0.5;
        CGFloat x = (K_APP_WIDTH - w) * 0.5;
        CGRect rect = CGRectMake(x, y, w, type_header_height);
        _segHead = [[MLMSegmentHead alloc] initWithFrame:rect
                                                  titles:column_type_arr
                                               headStyle:SegmentHeadStyleLine
                                             layoutStyle:MLMSegmentLayoutDefault];
        _segHead.delegate = self;
        
        _segHead.bottomLineHeight = 0;                      //底部线
        _segHead.headColor = UIColor.clearColor;            //背景色
        
        _segHead.selectColor = K_HEAD_MENU_SELECT_COLOR;    //选中的颜色
        _segHead.deSelectColor = K_HEAD_MENU_DEFAULT_COLOR; //默认颜色
        
        _segHead.fontSize = K_HEAD_MENU_FONT_SIZE;          //字体大小
        _segHead.fontScale = K_HEAD_MENU_SCALE;             //缩放大小
        
        _segHead.lineColor = K_HEAD_MENU_LINE_COLOR;        //下划线颜色
        _segHead.lineHeight = K_HEAD_BOTTOM_LINE_HEIGHT;    //下划线高度
        _segHead.lineWidth = K_HEAD_BOTTOM_LINE_WIDTH;      //下划线宽度
        _segHead.slideCorner = K_HEAD_BOTTOM_LINE_CORNER;
    }
    return _segHead;
}

-(MLMSegmentScroll *)segScroll{
    if (!_segScroll) {
        CGFloat h = K_APP_HEIGHT - K_APP_NAVIGATION_BAR_HEIGHT - K_APP_TABBAR_HEIGHT;
        _segScroll = [[MLMSegmentScroll alloc] initWithFrame:CGRectMake(0, K_APP_NAVIGATION_BAR_HEIGHT, K_APP_WIDTH, h)
                                                   vcOrViews:[self collectionViewArr:[column_type_arr count]]];
        _segScroll.loadAll = NO;
        
        //__weak typeof(self) weakSelf = self;
        __block typeof(self) blockSelf = self;
        _segScroll.scrollEndAction = ^(NSInteger currentIndex, BOOL isLeft, BOOL isRight) {
            
            //UISwipeGestureRecognizer *swipeGesture = [[UISwipeGestureRecognizer alloc] init];
            
            //滑动上一个大栏目
            if (currentIndex == 0 && isLeft == NO) {
                //swipeGesture.direction = .right
                //self.swipeHandelAction(sender: swipeGesture)
            }
            //滑动下一个大栏目
            else if (currentIndex == [column_type_arr count] - 1 && isLeft == NO) {
//                swipeGesture.direction = UISwipeGestureRecognizerDirectionLeft;
//                [weakSelf swipeHandelAction:swipeGesture];
            }
            else{
                blockSelf.selectIndex = currentIndex;
            }
        };
    }
    return _segScroll;
}

//添加视图
-(NSArray *)collectionViewArr:(NSUInteger)count{
    NSMutableArray *_arr = [NSMutableArray array];
    MainListCollectionViewController *_cv;
    NSString *strType;
    for (NSUInteger i = 0; i < count; i++) {
        strType = [NSString stringWithFormat:@"%@",[column_type_arr objectAtIndex:i]];
        _cv = [[MainListCollectionViewController alloc] initWithType:strType];
        [_arr addObject:_cv];
    }
    
    return [_arr copy];
}

-(AnnouncementsView *)noticeView{
    if (!_noticeView) {
        _noticeView = [[AnnouncementsView alloc] init];
        _noticeView.delegate = self;
    }
    return _noticeView;
}

-(CustomIOS7AlertView *)alertView{
    if (!_alertView) {
        _alertView = [[CustomIOS7AlertView alloc] init];
        [_alertView setButtonTitles:nil];
        [_alertView setUseMotionEffects:YES];
    }
    return _alertView;
}
//MARK: - 单例
/** 控制器单例 */
+(instancetype)shareInstance{
    if(_shareInstance != nil){
        return _shareInstance;
    }
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        if(_shareInstance == nil){
            _shareInstance = [[self alloc] init];
        }
    });
    return _shareInstance;
}
-(id)copyWithZone:(NSZone *)zone{
    return _shareInstance;
}
+(id)allocWithZone:(struct _NSZone *)zone{
    
    if(_shareInstance != nil){
        return _shareInstance;
    }
    
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        if(_shareInstance == nil){
            _shareInstance = [super allocWithZone:zone];
        }
    });
    
    return _shareInstance;
}


//MARK: - 搜索
-(UIButton *)btnSearch{
    if (!_btnSearch) {
        CGFloat w = 35;
        CGFloat x = [[UIDevice currentDevice] isSmallDevice]?15:25;
        CGFloat h = 35;
        CGFloat y = ([[UIDevice currentDevice] isiPhoneX]?K_APP_IPHONX_TOP:20) + (44 - h) * 0.5;
        _btnSearch =[BaseUIView createBtn:CGRectMake(x, y, w, h)
                                 AndTitle:nil
                            AndTitleColor:nil
                               AndTxtFont:nil
                                 AndImage:[UIImage imageNamed:@"search_seek_gray"]
                       AndbackgroundColor:nil
                           AndBorderColor:nil
                          AndCornerRadius:0
                             WithIsRadius:NO
                      WithBackgroundImage:nil
                          WithBorderWidth:0];
        
        [_btnSearch addTarget:self action:@selector(btnSearchAction:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _btnSearch;
}

-(IBAction)btnSearchAction:(UIButton *)sender{
    SearchVC *vc = [SearchVC new];
    vc.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:vc animated:YES];
}


//MARK: - 历史
-(UIButton *)btnHistory{
    if (!_btnHistory) {
        CGFloat w = 35;
        CGFloat h = 35;
        CGFloat x = K_APP_WIDTH - w - self.btnSearch.frame.origin.x;
        CGFloat y = ([[UIDevice currentDevice] isiPhoneX]?K_APP_IPHONX_TOP:20) + (44 - h) * 0.5;
        _btnHistory =[BaseUIView createBtn:CGRectMake(x, y, w, h)
                                 AndTitle:nil
                            AndTitleColor:nil
                               AndTxtFont:nil
                                 AndImage:[UIImage imageNamed:@"main_history.png"]
                       AndbackgroundColor:nil
                           AndBorderColor:nil
                          AndCornerRadius:0
                             WithIsRadius:NO
                      WithBackgroundImage:nil
                          WithBorderWidth:0];
        
        [_btnHistory addTarget:self action:@selector(btnHistoryhAction:) forControlEvents:UIControlEventTouchUpInside];
    }
    return _btnHistory;
}

-(IBAction)btnHistoryhAction:(UIButton *)sender{
    if (![UserModel userIsLogin]) {
        [self userToLogin:(LoginViewControllerDelegate *)self];
        return;
    }
    
    [self togoHistory];
}

-(void)togoHistory{
    RecentVC *recentVC = [[RecentVC alloc] init];
    [self.navigationController pushViewController:recentVC animated:YES];
}


//MARK: - LoginViewControllerDelegate
-(void)loginFinishBack{
    [self togoHistory];
}


//MARK: - 公告
-(void)showNoticeView{
    if (self.arrNotice && [self.arrNotice count] > 0) {
        [self showNoticeViewIndex:0 withButtonString:@"下一个"];
        [self.alertView setContainerView:self.noticeView];
        [self.alertView show];
    }
}

-(void)showNoticeViewIndex:(NSInteger)index withButtonString:(NSString *)strbtn{
    
    if (!self.arrNotice || [self.arrNotice count] <= index) {
        ZWWLog(@"数据不存在，或索引越界");
        return;
    }
    
    AnnouncementsModel *model;
    id tmp = self.arrNotice[index];
    if ([tmp isKindOfClass:[AnnouncementsModel class]]) {
        model = tmp;
    }
    else{
        model = [AnnouncementsModel mj_objectWithKeyValues:tmp];
    }
    
    CGRect rect = self.noticeView.frame;
    CGFloat h = [Utils getHeightForString:model.content andFontSize:self.noticeView.labContent.font andWidth:self.noticeView.labContent.frame.size.width];
    rect.size = CGSizeMake(K_APP_BOX_WIDTH, h + [AnnouncementsView minViewHeight]);
    self.noticeView.frame = rect;
    
    [self.noticeView initUpdateView:model
                      AndButtonInfo:strbtn
                           AndIndex:index
                        WithOffsetH:h];
}

//加载公告
-(void)loadNoticeData{
    NSString *strUrl = [NSString stringWithFormat:@"%@Announcements",K_APP_HOST];
    NSDictionary *dicParams = @{@"id":@"0"};
    
    __block typeof(self) blockSelf = self;
    [Utils getRequestForServerData:strUrl
                    withParameters:dicParams
                AndHTTPHeaderField:nil
                    AndSuccessBack:^(id _responseData) {
                        if (_responseData && [[_responseData allKeys] containsObject:@"data"]) {
                            NSArray *tmpArr = _responseData[@"data"];
                            blockSelf.arrNotice = [AnnouncementsModel
                                                 mj_keyValuesArrayWithObjectArray:tmpArr];
                        }
                        else{
                            ZWWLog(@"加载公告请求失败！详见：%@",_responseData);
                        }
                    } AndFailureBack:^(NSString *_strError) {
                        ZWWLog(@"加载公告请求异常！详见：%@",_strError);
                    } WithisLoading:NO];
}


//MARK: - AnnouncementsViewDelegate
-(void)announcementsViewDelegateNextIndex:(NSInteger)index{
    if (self.arrNotice) {
        if ([self.arrNotice count] > index + 1) {
            [self showNoticeViewIndex:index+1
                     withButtonString:([self.arrNotice count] - 1 > index + 1)?@"下一个":@"关闭"];
            
            [self.alertView.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
            [self.alertView show];
        }
        else{
             [self.alertView close];
        }
    }
}

-(void)announcementsViewDelegateClose{
    
    [self.alertView close];
    ZWWLog(@"关闭");
}


//MARK: - 加载幻灯片广告
-(void)loadBannelADData{

    /**
     * pos：1视频列表 2视频列表顶端（最新）3视频列表顶端（最热） 4视频列表顶端（关注） 5视频播放之前 6视频播放界面关注栏目以下 7视频切换广告
     */
    NSString *strUrl = [NSString stringWithFormat:@"%@Adv",K_APP_STATIC_HOST];
    NSDictionary *dicParams = @{
                                @"pos":@"2",//目前最新和发现一样
                                @"size":@"10"
                                };
    
    [Utils getRequestForServerData:strUrl
                    withParameters:dicParams
                AndHTTPHeaderField:nil
                    AndSuccessBack:^(id _responseData) {
                        if (_responseData && [[_responseData allKeys] containsObject:@"data"]) {
                            NSArray *tmpArr = _responseData[@"data"];
                            [[NSUserDefaults standardUserDefaults] setObject: [Advertisements mj_keyValuesArrayWithObjectArray:tmpArr] forKey:K_MAIN_AD_DATA];
                            [[NSUserDefaults standardUserDefaults] synchronize];
                        }
                        else{
                            ZWWLog(@"头部幻灯片广告请求失败！详见：%@",_responseData);
                        }
                    } AndFailureBack:^(NSString *_strError) {
                        ZWWLog(@"头部幻灯片广告请求异常！详见：%@",_strError);
                    } WithisLoading:NO];
}


//MARK: - MLMSegmentHeadDelegate
-(void)didSelectedIndex:(NSInteger)index{
    //ZWWLog(@"当前索引：%lD",(long)index);
}

@end
